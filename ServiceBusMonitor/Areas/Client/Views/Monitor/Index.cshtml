@model ServiceBusMonitor.Areas.Client.Models.MonitorViewModel
@{
    ViewData["Title"] = $"{Model?.ActiveBus} - Service Bus Monitor";
}

<nav class="navbar fixed-top">
    <div class="d-flex align-items-center navbar-left" onclick="menu()">
        <a href="#" class="menu-button d-none d-md-block">
            <img src="~/img/logo-small.png" style="width: 50px;" />
        </a>

        <a href="#" class="menu-button-mobile d-xs-block d-sm-block d-md-none">
            <img src="~/img/logo-small.png" style="width: 19px; margin-top: -9px;" />
        </a>

        <h3><b>@Model?.ActiveBus</b></h3>
    </div>

    <div class="navbar-right">
        <div class="user d-inline-block">
            Last update:
            <span
                class="auto-update"
                data-show-loader-icon="1"
                data-url="@Url.Action("Update", "Updater", new { area = "Api" })"
                data-timeout="10000"></span>
        </div>
    </div>
</nav>
<div class="menu">
    <div class="main-menu">
        <div class="scroll">
            <ul class="list-unstyled">
                @foreach (var busName in Model.ServiceBusNames)
                {
                    <li class="@(busName.Equals(Model?.ActiveBus ?? string.Empty) ? "active" : "")">
                        <a asp-area="Client" asp-controller="Monitor" asp-action="Index" asp-route-bus="@busName">
                            <i class="fa fa-bus"></i> @busName
                        </a>
                    </li>
                }
            </ul>
        </div>
    </div>
</div>

<main>
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-5 col-md-6 mb-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title"><i class="fa fa-tasks"></i> Queues</h5>

                        <!-- todo: <table class="table table-sm table-striped caption-top"> -->
                        <div
                            id="bus-queues"
                            class="auto-update scroll dashboard-logs ps ps--active-y"
                            data-has-callback="1"
                            data-url="@Url.Action("Queues", "Bus", new { area = "Api", busName = Model.ActiveBus })"
                            data-timeout="5000"></div>
                    </div>
                </div>
            </div>

            <div class="col-lg-7 col-md-6 mb-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title"><i class="fa fa-book"></i> Topics</h5>
                        
                        <!-- todo: <table class="table table-sm table-striped table-hover caption-top"> -->
                        <div
                            id="bus-topics"
                            class="auto-update scroll dashboard-logs ps ps--active-y"
                            data-has-callback="1"
                            data-url="@Url.Action("Topics", "Bus", new { area = "Api", busName = Model.ActiveBus })"
                            data-timeout="5000"></div>
                    </div>
                </div>
            </div>

            <div class="col-md-12 mb-4" id="dlq-messages-holder">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title"><i class="fa fa-comment"></i> DLQ Messages</h5>
                        
                        <!-- todo: <table class="table table-sm table-striped table-hover caption-top"> -->
                        <div class="table-responsive holder-content"></div>
                    </div>
                </div>
            </div>

            <div class="col-md-12 mb-4" id="dlq-message-ai-logs-holder">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title"><i class="fa fa-bar-chart"></i> Application Insights logging</h5>
                        
                        <!-- todo: <table class="table table-sm table-striped caption-top"> -->
                        <div class="table-responsive holder-content"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>

<div class="theme-colors default-transition">
    <div class="p-3 scroll" style="overflow-y: scroll; height: 100vh;">
        <p class="text-muted mb-2">
            <b><i class="fa fa-laptop"></i> Debug Console</b>
        </p>
        <hr />
        <p><b>[15:22:32]</b> No queue found on service Bus#1</p>
        <p><b>[15:22:45]</b> Update a topic in queue process</p>
        <p><b>[15:22:55]</b> starting update process for topic and quotes</p>
        <p><b>[15:22:32]</b> No queue found on service Bus#1</p>
        <p><b>[15:22:45]</b> Update a topic in queue process</p>
        <p><b>[15:22:55]</b> starting update process for topic and quotes</p>
        <p><b>[15:22:32]</b> No queue found on service Bus#1</p>
        <p><b>[15:22:45]</b> Update a topic in queue process</p>
        <p><b>[15:22:55]</b> starting update process for topic and quotes</p>
        <p><b>[15:22:32]</b> No queue found on service Bus#1</p>
        <p><b>[15:22:45]</b> Update a topic in queue process</p>
        <p><b>[15:22:55]</b> starting update process for topic and quotes</p>
        <p><b>[15:22:32]</b> No queue found on service Bus#1</p>
        <p><b>[15:22:45]</b> Update a topic in queue process</p>
        <p><b>[15:22:55]</b> starting update process for topic and quotes</p>
    </div>
    <a href="#" class="theme-button"> <i class="fa fa-user-secret"></i> </a>
</div>


<!--
    
<div id="dlq-messages-holder">
    <p>DLQ Messages</p>
    <div id="dlq-messages"></div>
</div>
    
<div id="dlq-message-ai-logs-holder">
    <p>Application Insights logging</p>
    <div id="dlq-message-ai-logs"></div>
</div>
-->

<script>
    // Loader image, when applicable
    var loaderHtml = '<i class="fas fa-circle-notch fa-spin"></i>';

    // Reset all UI elements
    var resetInterface = function() {
        $('#dlq-messages-holder').hide();
        $('#dlq-message-ai-logs-holder').hide();
    };

    // Active bus column hash
    var activeBusColumn = '';

    var activateBusColumnInInterface = function(scope) {
        scope.find('.active-bus-line').removeClass('active-bus-line');

        if (activeBusColumn !== '') {
            $(scope).find('tr[data-hash="' + activeBusColumn + '"]').addClass('active-bus-line');
        }
    };

    // Column click handler on bus topic/queue
    var clickBusColumn = function(hash) {
        resetInterface();
        activeBusColumn = activeBusColumn === hash ? '' : hash;
        activateBusColumnInInterface($('body'));
        loadDlqMessages();
    };

    var loadDlqMessages = function() {
        $('#dlq-messages').html(loaderHtml);

        var element = $('tr[data-hash="' + activeBusColumn + '"]');
        var busType = element.data('bus-type');

        switch (busType) {
            case 'queue':
                var busName = element.data('bus-name');
                loadDlqMessagesFromQueue(busName);
                break;

            case 'topic':
                var busName = element.data('bus-name');
                var busSubscription = element.data('bus-subscription');
                loadDlqMessagesFromTopicSubscription(busName, busSubscription);
                break;
        }

        $('#dlq-messages-holder').show();
    };

    var showDlqMessagesTable = function(messages) {
        var table = $(
            '<table class="table table-striped table-hover">' +
            '   <thead>' +
            '       <tr>' +
            '           <th>Enqueued</th>' +
            '           <th>Content</th>' +
            '       </tr>' +
            '   </thead>' +
            '   <tbody></tbody>' +
            '</table>');

        if (messages != undefined) {
            messages.forEach(message => {
                var tr = $('<tr></tr>');
                tr.attr('data-message-id', message.id);
                tr.attr('data-message-enqueued', message.enqueued);

                var td = $('<td></td>');
                td.text(message.enqueued);
                tr.append(td);

                td = $('<td></td>');
                td.text(message.content);

                var lineActions = $('<div></div>');

                var downloadAction = $('<a href="javascript:;">Download</a>');
                downloadAction.on('click', function() {
                    var blob = new Blob([message.content], { type: "text/plain;charset=utf-8" });
                    saveAs(blob, "msg-" + message.id + ".json");

                    return false;
                });
                lineActions.append(downloadAction);

                var deleteAction = $('<a href="javascript:;">Delete</a>');
                deleteAction.on('click', function() {
                    $(this).off('click');
                    $(this).html(loaderHtml);

                    var element = $('tr[data-hash="' + activeBusColumn + '"]');
                    var busType = element.data('bus-type');

                    var apiBaseUri = '';
                    var data = {};

                    switch (busType) {
                        case 'queue':
                            apiBaseUri = '@Url.Action("RemoveDlqMessageFromQueue", "Bus", new { area = "Api" })';
                            data = {
                                busName: '@Model.ActiveBus',
                                queueName: element.data('bus-name'),
                                messageId: message.id
                            };
                            break;

                        case 'topic':
                            apiBaseUri = '@Url.Action("RemoveDlqMessageFromTopicSubscription", "Bus", new { area = "Api" })';
                            data = {
                                busName: '@Model.ActiveBus',
                                topicName: element.data('bus-name'),
                                subscriptionName: element.data('bus-subscription'),
                                messageId: message.id
                            };
                            break;
                    }

                    $.ajax({
                        type: "POST",
                        url: apiBaseUri,
                        data: JSON.stringify(data),
                        contentType : 'application/json',
                        success: function() {
                            loadDlqMessages();
                        }
                    });

                    return false;
                });
                lineActions.append(deleteAction);


                lineActions.append(lineActions);
                td.append(lineActions);

                tr.append(td);

                table.find('tbody').append(tr);
            });
        }

        var target = $('#dlq-messages');
        target.html('');
        target.append(table);
        target.find('tbody > tr').on('click', function() {
            target.find('.active-message-line').removeClass('active-message-line');
            $(this).addClass('active-message-line');

            showApplicationInsightsData($(this).data('message-enqueued'));
        });
    };

    var loadDlqMessagesFromQueue = function(queueName) {
        var apiBaseUri = '@Url.Action("DlqMessagesOnQueue", "Bus", new { area = "Api" })';
        var data = {
            busName: '@Model.ActiveBus',
            queueName: queueName
        };

        $.get(apiBaseUri, data, function(json) {
            showDlqMessagesTable(json);
        });
    };

    var loadDlqMessagesFromTopicSubscription = function(topicName, subscriptionName) {
        var apiBaseUri = '@Url.Action("DlqMessagesOnTopic", "Bus", new { area = "Api" })';
        var data = {
            busName: '@Model.ActiveBus',
            topicName: topicName,
            subscriptionName: subscriptionName
        };

        $.get(apiBaseUri, data, function(json) {
            showDlqMessagesTable(json);
        });
    };

    // Application Insights data
    var showApplicationInsightsData = function(enqueueTimeUtc) {
        $('#dlq-message-ai-logs').html(loaderHtml);
        $('#dlq-message-ai-logs-holder').show();

        var apiBaseUri = '@Url.Action("GetExceptionLogs", "ApplicationInsights", new { area = "Api" })';
        var data = {
            busName: '@Model.ActiveBus',
            dateTime: enqueueTimeUtc
        };
        
        $.get(apiBaseUri, data, function(json) {
            buildLogTableFromSourceData(json);
        });
    };

    var buildLogTableFromSourceData = function(json) {
        if (json.length === 0) {
            $('#dlq-message-ai-logs').html('<em>Geen logregels gevonden.</em>');
        } else {
            var table = $('<table class="table table-striped table-hover table-sm"><thead><tr></tr></thead><tbody></tbody></table>');

            for (var heading in json[0]) {
                var th = $('<th></th>');
                th.text(heading);
                $(table).find('thead > tr').append(th);
            }

            for (var row in json) {
                var tr = $('<tr></tr>');

                for (var heading in json[row]) {
                    var td = $('<td></td>');
                    td.text(json[row][heading]);
                    tr.append(td);
                }

                $(table).children('tbody').append(tr);
            }

            $('#dlq-message-ai-logs').html("");
            $('#dlq-message-ai-logs').append(table);
        }
    };

    // Auto reload method
    var reload = function(obj) {
        var url = $(obj).data('url');
        var timeout = $(obj).data('timeout');

        if ($(obj).data('show-loader-icon')) {
            $(obj).html(loaderHtml);
        }

        $.get(url, function(data) {
            if ($(obj).data('has-callback')) {
                $(obj).trigger('callback', {result: data});
            } else {
                $(obj).html(data);
            }
            
            setTimeout(function() {
                reload(obj);
            }, timeout);
        });
    };

    // Init method that binds callbacks
    var bindCallbacks = function() {
        $('#bus-queues').on('callback', function(e, data) {
            var table = $(
                '<table class="table table-striped table-hover">' +
                '   <thead>' +
                '       <tr>' +
                '           <th>Queue</th>' +
                '           <th>Active</th>' +
                '           <th>DLQ</th>' +
                '       </tr>' +
                '   </thead>' +
                '   <tbody></tbody>' +
                '</table>');

            if (data != undefined && data.result != undefined) {
                data.result.forEach(queue => {
                    var tr = $('<tr></tr>');
                    tr.attr('data-hash', 'queue-' + queue.name);
                    tr.attr('data-bus-type', 'queue');
                    tr.attr('data-bus-name', queue.name);

                    var td = $('<td></td>');
                    td.text(queue.name);
                    tr.append(td);

                    td = $('<td></td>');
                    td.text(queue.activeMessages);
                    tr.append(td);

                    td = $('<td></td>');
                    td.text(queue.deadLetteredMessages);
                    tr.append(td);

                    table.find('tbody').append(tr);
                });
            }

            activateBusColumnInInterface(table);

            var target = $(e.target);
            var html = table[0].outerHTML;
            if (target.html() !== html) {
                target.html(html);

                target.find('tbody > tr').on('click', function() {
                    clickBusColumn($(this).data('hash'));
                });
            }
        });

        $('#bus-topics').on('callback', function(e, data) {
            var table = $(
                '<table class="table table-striped table-hover">' +
                '   <thead>' +
                '       <tr>' +
                '           <th>Topic</th>' +
                '           <th>Subscription</th>' +
                '           <th>Active</th>' +
                '           <th>DLQ</th>' +
                '       </tr>' +
                '   </thead>' +
                '   <tbody></tbody>' +
                '</table>');

            if (data != undefined && data.result != undefined) {
                data.result.forEach(topic => {
                    if (topic.subscriptions == null || topic.subscriptions.length === 0) {
                        var tr = $('<tr></tr>');
                        tr.attr('data-hash', 'topic-' + topic.name);

                        var td = $('<td cellspan="4"></td>');
                        td.text(topic.name);
                        tr.append(td);

                        table.find('tbody').append(tr);
                    } else {
                        topic.subscriptions.forEach(subscription => {
                            var tr = $('<tr></tr>');
                            tr.attr('data-hash', 'topic-' + topic.name + '-' + subscription.name);
                            tr.attr('data-bus-type', 'topic');
                            tr.attr('data-bus-name', topic.name);
                            tr.attr('data-bus-subscription', subscription.name);

                            var td = $('<td></td>');
                            td.text(topic.name);
                            tr.append(td);

                            td = $('<td></td>');
                            td.text(subscription.name);
                            tr.append(td);

                            td = $('<td></td>');
                            td.text(subscription.activeMessages);
                            tr.append(td);

                            td = $('<td></td>');
                            td.text(subscription.deadLetteredMessages);
                            tr.append(td);

                            table.find('tbody').append(tr);
                        });
                    }
                });
            }

            activateBusColumnInInterface(table);

            var target = $(e.target);
            var html = table[0].outerHTML;
            if (target.html() !== html) {
                target.html(html);

                target.find('tbody > tr').on('click', function() {
                    clickBusColumn($(this).data('hash'));
                });
            }
        });
    };

    // Function that runs when the page has loaded and all necessary scripts have been initialized
    windowload.push(function() {
        resetInterface();
        bindCallbacks();

        $('.auto-update').each(function() {
            reload(this);
        });
    });
</script>