@model ServiceBusMonitor.Areas.Client.Models.MonitorViewModel
@{
    ViewData["Title"] = $"{Model?.ActiveBus} - Service Bus Monitor";
}

<p>Service bus names:</p>
<ul>
    @foreach (var busName in Model.ServiceBusNames)
    {
        <li><a asp-area="Client" asp-controller="Monitor" asp-action="Index" asp-route-bus="@busName">@busName</a></li>
    }
</ul>

<p>
    Last update:
    <span
        class="auto-update"
        data-show-loader-icon="1"
        data-url="@Url.Action("Update", "Updater", new { area = "Api" })"
        data-timeout="10000"></span>
</p>

<p>Queues:</p>
<div
    id="bus-queues"
    class="auto-update"
    data-has-callback="1"
    data-url="@Url.Action("Queues", "Bus", new { area = "Api", busName = Model.ActiveBus })"
    data-timeout="5000"></div>

<p>Topics:</p>
<div
    id="bus-topics"
    class="auto-update"
    data-has-callback="1"
    data-url="@Url.Action("Topics", "Bus", new { area = "Api", busName = Model.ActiveBus })"
    data-timeout="5000"></div>
    
<div id="dlq-messages-holder">
    <p>DLQ Messages</p>
    <div id="dlq-messages"></div>
</div>
    
<div id="dlq-message-ai-logs-holder">
    <p>Application Insights logging</p>
    <div id="dlq-message-ai-logs"></div>
</div>


<script>
    // Loader image, when applicable
    var loaderHtml = '<span style="color:blue">***</span>';

    // Reset all UI elements
    var resetInterface = function() {
        $('#dlq-messages-holder').hide();
        $('#dlq-message-ai-logs-holder').hide();
    };

    // Active bus column hash
    var activeBusColumn = '';

    var activateBusColumnInInterface = function(scope) {
        scope.find('.active-bus-line').removeClass('active-bus-line');

        if (activeBusColumn !== '') {
            $(scope).find('tr[data-hash="' + activeBusColumn + '"]').addClass('active-bus-line');
        }
    };

    // Column click handler on bus topic/queue
    var clickBusColumn = function(hash) {
        resetInterface();
        activeBusColumn = activeBusColumn === hash ? '' : hash;
        activateBusColumnInInterface($('body'));
        loadDlqMessages();
    };

    var loadDlqMessages = function() {
        $('#dlq-messages').html('');

        var element = $('tr[data-hash="' + activeBusColumn + '"]');
        var busType = element.data('bus-type');

        switch (busType) {
            case 'queue':
                var busName = element.data('bus-name');
                loadDlqMessagesFromQueue(busName);
                break;

            case 'topic':
                var busName = element.data('bus-name');
                var busSubscription = element.data('bus-subscription');
                loadDlqMessagesFromTopicSubscription(busName, busSubscription);
                break;
        }

        $('#dlq-messages-holder').show();
    };

    var showDlqMessagesTable = function(messages) {
        var table = $(
            '<table class="table table-striped table-hover">' +
            '   <thead>' +
            '       <tr>' +
            '           <th>Enqueued</th>' +
            '           <th>Content</th>' +
            '       </tr>' +
            '   </thead>' +
            '   <tbody></tbody>' +
            '</table>');

        if (messages != undefined) {
            messages.forEach(message => {
                var tr = $('<tr></tr>');
                tr.attr('data-message-id', message.id);
                tr.attr('data-message-enqueued', message.enqueued);

                var td = $('<td></td>');
                td.text(message.enqueued);
                tr.append(td);

                td = $('<td></td>');
                td.text(message.content);
                tr.append(td);

                table.find('tbody').append(tr);
            });
        }

        var target = $('#dlq-messages');
        target.append(table);
        target.find('tbody > tr').on('click', function() {
            target.find('.active-message-line').removeClass('active-message-line');
            $(this).addClass('active-message-line');

            showApplicationInsightsData($(this).data('message-enqueued'));
        });
    };

    var loadDlqMessagesFromQueue = function(queueName) {
        var apiBaseUri = '@Url.Action("DlqMessagesOnQueue", "Bus", new { area = "Api" })';
        var data = {
            busName: '@Model.ActiveBus',
            queueName: queueName
        };

        $.get(apiBaseUri, data, function(json) {
            showDlqMessagesTable(json);
        });
    };

    var loadDlqMessagesFromTopicSubscription = function(topicName, subscriptionName) {
        var apiBaseUri = '@Url.Action("DlqMessagesOnTopic", "Bus", new { area = "Api" })';
        var data = {
            busName: '@Model.ActiveBus',
            topicName: topicName,
            subscriptionName: subscriptionName
        };

        $.get(apiBaseUri, data, function(json) {
            showDlqMessagesTable(json);
        });
    };

    // Application Insights data
    var showApplicationInsightsData = function(enqueueTimeUtc) {
        $('#dlq-message-ai-logs').html(loaderHtml);
        $('#dlq-message-ai-logs-holder').show();

        var apiBaseUri = '@Url.Action("GetExceptionLogs", "ApplicationInsights", new { area = "Api" })';
        var data = {
            busName: '@Model.ActiveBus',
            dateTime: enqueueTimeUtc
        };
        
        $.get(apiBaseUri, data, function(json) {
            buildLogTableFromSourceData(json);
        });
    };

    var buildLogTableFromSourceData = function(json) {
        if (json.length === 0) {
            $('#dlq-message-ai-logs').html('<em>Geen logregels gevonden.</em>');
        } else {
            var table = $('<table class="table table-striped table-hover table-sm"><thead><tr></tr></thead><tbody></tbody></table>');

            for (var heading in json[0]) {
                var th = $('<th></th>');
                th.text(heading);
                $(table).find('thead > tr').append(th);
            }

            for (var row in json) {
                var tr = $('<tr></tr>');

                for (var heading in json[row]) {
                    var td = $('<td></td>');
                    td.text(json[row][heading]);
                    tr.append(td);
                }

                $(table).children('tbody').append(tr);
            }

            $('#dlq-message-ai-logs').append(table);
        }
    };

    // Auto reload method
    var reload = function(obj) {
        var url = $(obj).data('url');
        var timeout = $(obj).data('timeout');

        if ($(obj).data('show-loader-icon')) {
            $(obj).html(loaderHtml);
        }

        $.get(url, function(data) {
            if ($(obj).data('has-callback')) {
                $(obj).trigger('callback', {result: data});
            } else {
                $(obj).html(data);
            }
            
            setTimeout(function() {
                reload(obj);
            }, timeout);
        });
    };

    // Init method that binds callbacks
    var bindCallbacks = function() {
        $('#bus-queues').on('callback', function(e, data) {
            var table = $(
                '<table class="table table-striped table-hover">' +
                '   <thead>' +
                '       <tr>' +
                '           <th>Queue</th>' +
                '           <th>Active</th>' +
                '           <th>DLQ</th>' +
                '       </tr>' +
                '   </thead>' +
                '   <tbody></tbody>' +
                '</table>');

            if (data != undefined && data.result != undefined) {
                data.result.forEach(queue => {
                    var tr = $('<tr></tr>');
                    tr.attr('data-hash', 'queue-' + queue.name);
                    tr.attr('data-bus-type', 'queue');
                    tr.attr('data-bus-name', queue.name);

                    var td = $('<td></td>');
                    td.text(queue.name);
                    tr.append(td);

                    td = $('<td></td>');
                    td.text(queue.activeMessages);
                    tr.append(td);

                    td = $('<td></td>');
                    td.text(queue.deadLetteredMessages);
                    tr.append(td);

                    table.find('tbody').append(tr);
                });
            }

            activateBusColumnInInterface(table);

            var target = $(e.target);
            var html = table[0].outerHTML;
            if (target.html() !== html) {
                target.html(html);

                target.find('tbody > tr').on('click', function() {
                    clickBusColumn($(this).data('hash'));
                });
            }
        });

        $('#bus-topics').on('callback', function(e, data) {
            var table = $(
                '<table class="table table-striped table-hover">' +
                '   <thead>' +
                '       <tr>' +
                '           <th>Topic</th>' +
                '           <th>Subscription</th>' +
                '           <th>Active</th>' +
                '           <th>DLQ</th>' +
                '       </tr>' +
                '   </thead>' +
                '   <tbody></tbody>' +
                '</table>');

            if (data != undefined && data.result != undefined) {
                data.result.forEach(topic => {
                    if (topic.subscriptions == null || topic.subscriptions.length === 0) {
                        var tr = $('<tr></tr>');
                        tr.attr('data-hash', 'topic-' + topic.name);

                        var td = $('<td cellspan="4"></td>');
                        td.text(topic.name);
                        tr.append(td);

                        table.find('tbody').append(tr);
                    } else {
                        topic.subscriptions.forEach(subscription => {
                            var tr = $('<tr></tr>');
                            tr.attr('data-hash', 'topic-' + topic.name + '-' + subscription.name);
                            tr.attr('data-bus-type', 'topic');
                            tr.attr('data-bus-name', topic.name);
                            tr.attr('data-bus-subscription', subscription.name);

                            var td = $('<td></td>');
                            td.text(topic.name);
                            tr.append(td);

                            td = $('<td></td>');
                            td.text(subscription.name);
                            tr.append(td);

                            td = $('<td></td>');
                            td.text(subscription.activeMessages);
                            tr.append(td);

                            td = $('<td></td>');
                            td.text(subscription.deadLetteredMessages);
                            tr.append(td);

                            table.find('tbody').append(tr);
                        });
                    }
                });
            }

            activateBusColumnInInterface(table);

            var target = $(e.target);
            var html = table[0].outerHTML;
            if (target.html() !== html) {
                target.html(html);

                target.find('tbody > tr').on('click', function() {
                    clickBusColumn($(this).data('hash'));
                });
            }
        });
    };

    // Function that runs when the page has loaded and all necessary scripts have been initialized
    windowload.push(function() {
        resetInterface();
        bindCallbacks();

        $('.auto-update').each(function() {
            reload(this);
        });
    });
</script>