@model ServiceBusMonitor.Areas.Client.Models.MonitorViewModel
@{
    ViewData["Title"] = $"{Model?.ActiveBus} - Service Bus Monitor";
}

<p>Service bus names:</p>
<ul>
    @foreach (var busName in Model.ServiceBusNames)
    {
        <li><a asp-area="Client" asp-controller="Monitor" asp-action="Index" asp-route-bus="@busName">@busName</a></li>
    }
</ul>

<p>
    Last update:
    <span id="last-update"></span>
</p>

<p>Queues:</p>
<div id="bus-queues"></div>

<p>Topics:</p>
<div id="bus-topics"></div>
    
<div id="dlq-messages-holder">
    <p>DLQ Messages</p>
    <div id="dlq-messages"></div>
</div>
    
<div id="dlq-message-ai-logs-holder">
    <p>Application Insights logging</p>
    <div id="dlq-message-ai-logs"></div>
</div>

@section Scripts {
<script>
    var endpoints = new Endpoints();
    endpoints.lastUpdate = "@Url.Action("Update", "Updater", new { area = "Api" })";
    endpoints.queues = "@Url.Action("Queues", "Bus", new { area = "Api", busName = Model.ActiveBus })";
    endpoints.topics = "@Url.Action("Topics", "Bus", new { area = "Api", busName = Model.ActiveBus })";
    endpoints.dlqMessagesOnQueue = "@Url.Action("DlqMessagesOnQueue", "Bus", new { area = "Api" })";
    endpoints.dlqMessagesOnTopic = "@Url.Action("DlqMessagesOnTopic", "Bus", new { area = "Api" })";
    endpoints.exceptionLogs = "@Url.Action("GetExceptionLogs", "ApplicationInsights", new { area = "Api" })";
    endpoints.actionRemoveDlqMessageFromQueue = "@Url.Action("RemoveDlqMessageFromQueue", "Bus", new { area = "Api" })";
    endpoints.actionRemoveDlqMessageFromTopicSubscription = "@Url.Action("RemoveDlqMessageFromTopicSubscription", "Bus", new { area = "Api" })";

    var sb = new ServiceBusMonitor(new ServiceBusOptions('@(Model.ActiveBus)', endpoints));
    
    $(function() {
        sb.init();
    });

    /*
    // Active bus column hash
    var activeBusColumn = '';

    var showDlqMessagesTable = function(messages) {
        var table = $(
            '<table class="table table-striped table-hover">' +
            '   <thead>' +
            '       <tr>' +
            '           <th>Enqueued</th>' +
            '           <th>Content</th>' +
            '       </tr>' +
            '   </thead>' +
            '   <tbody></tbody>' +
            '</table>');

        if (messages != undefined) {
            messages.forEach(message => {
                var tr = $('<tr></tr>');
                tr.attr('data-message-id', message.id);
                tr.attr('data-message-enqueued', message.enqueued);

                var td = $('<td></td>');
                td.text(message.enqueued);
                tr.append(td);

                td = $('<td></td>');
                td.text(message.content);

                var lineActions = $('<div></div>');

                var downloadAction = $('<a href="javascript:;">Download</a>');
                downloadAction.on('click', function() {
                    var blob = new Blob([message.content], { type: "text/plain;charset=utf-8" });
                    saveAs(blob, "msg-" + message.id + ".json");

                    return false;
                });
                lineActions.append(downloadAction);

                var deleteAction = $('<a href="javascript:;">Delete</a>');
                deleteAction.on('click', function() {
                    $(this).off('click');
                    $(this).html(loaderHtml);

                    var element = $('tr[data-hash="' + activeBusColumn + '"]');
                    var busType = element.data('bus-type');

                    var apiBaseUri = '';
                    var data = {};

                    switch (busType) {
                    case 'queue':
                        apiBaseUri = '@Url.Action("RemoveDlqMessageFromQueue", "Bus", new { area = "Api" })';
                        data = {
                            busName: '@Model.ActiveBus',
                            queueName: element.data('bus-name'),
                            messageId: message.id
                        };
                        break;

                    case 'topic':
                        apiBaseUri = '@Url.Action("RemoveDlqMessageFromTopicSubscription", "Bus", new { area = "Api" })';
                        data = {
                            busName: '@Model.ActiveBus',
                            topicName: element.data('bus-name'),
                            subscriptionName: element.data('bus-subscription'),
                            messageId: message.id
                        };
                        break;
                    }

                    $.ajax({
                        type: "POST",
                        url: apiBaseUri,
                        data: JSON.stringify(data),
                        contentType : 'application/json',
                        success: function() {
                            loadDlqMessages();
                        }
                    });

                    return false;
                });
                lineActions.append(deleteAction);


                lineActions.append(lineActions);
                td.append(lineActions);

                tr.append(td);

                table.find('tbody').append(tr);
            });
        }

        var target = $('#dlq-messages');
        target.html('');
        target.append(table);
        target.find('tbody > tr').on('click', function() {
            target.find('.active-message-line').removeClass('active-message-line');
            $(this).addClass('active-message-line');

            showApplicationInsightsData($(this).data('message-enqueued'));
        });
    };
    */
</script>
}